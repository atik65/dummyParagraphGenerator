{"version":3,"sources":["components/paraData.js","components/Paragraph.jsx","App.js","reportWebVitals.js","index.js"],"names":["paraData","Paragraph","useState","value","setValue","para","setPara","className","action","onSubmit","e","preventDefault","newArray","slice","type","id","onChange","inputValue","parseInt","target","placeholder","map","data","index","length","role","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAUeA,EAVE,CACf,qeACA,olBACA,skBACA,i0BACA,2iBACA,smBACA,0f,OCqEaC,EAzEG,WAChB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAuBA,OACE,mCACE,sBAAKC,UAAU,6BAAf,UACE,oBAAIA,UAAU,YAAd,uCACA,qBAAKA,UAAU,gBAAf,SACE,sBAAMC,OAAO,GAAGC,SAjBH,SAACC,GACpBA,EAAEC,iBACF,IAAIC,EAAWZ,EAASa,MAAM,EAAGV,GACnB,KAAVA,IACFS,EAAWZ,GAEC,IAAVG,IACFS,EAAW,IAEbN,EAAQM,IAQF,SACE,sBAAKL,UAAU,oBAAf,UACE,uBACEO,KAAK,SACLP,UAAU,eACVQ,GAAG,OACH,mBAAiB,SACjBZ,MAAOA,EACPa,SAlCO,SAACN,GACpB,IAAMO,EAAaC,SAASR,EAAES,OAAOhB,OAEnCC,EADEa,EAAa,EACN,EAEAA,IA8BCG,YAAY,wBAEd,yBAAQN,KAAK,SAASP,UAAU,0BAAhC,UACG,IADH,WAEW,cAMjB,qBAAKA,UAAU,gBAAf,SACGF,EAAKgB,KAAI,SAACC,EAAMC,GACf,OACE,qBAAiBhB,UAAU,sBAA3B,SACE,kCAAKe,MADGC,QAOhB,4BACGpB,EAAQH,EAASwB,OAChB,qBAAKjB,UAAU,0BAA0BkB,KAAK,QAA9C,SACE,uFAGF,WCzDGC,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1c2449ea.chunk.js","sourcesContent":["const paraData = [\r\n  \"Do you like Cheese Whiz? Spray tan? Fake eyelashes? That's what is Lorem Ipsum to many—it rubs them the wrong way, all the way. It's unreal, uncanny, makes you wonder if something is wrong, it seems to seek your attention for all the wrong reasons. Usually, we prefer the real thing, wine without sulfur based preservatives, real butter, not margarine, and so we'd like our layouts and designs to be filled with real words, with thoughts that count, information that has value.\",\r\n  \"The toppings you may chose for that TV dinner pizza slice when you forgot to shop for foods, the paint you may slap on your face to impress the new boss is your business. But what about your daily bread? Design comps, layouts, wireframes—will your clients accept that you go about things the facile way? Authorities in our business will tell in no uncertain terms that Lorem Ipsum is that huge, huge no no to forswear forever. Not so fast, I'd say, there are some redeeming factors in favor of greeking text, as its use is merely the symptom of a worse problem to take into consideration.\",\r\n  \"You begin with a text, you sculpt information, you chisel away what's not needed, you come to the point, make things clear, add value, you're a content person, you like words. Design is no afterthought, far from it, but it comes in a deserved second. Anyway, you still use Lorem Ipsum and rightly so, as it will always have a place in the web workers toolbox, as things happen, not always the way you like it, not always in the preferred order. Even if your less into design and more into content strategy you may find some redeeming value with, wait for it, dummy copy, no less.\",\r\n  \"Consider this: You made all the required mock ups for commissioned layout, got all the approvals, built a tested code base or had them built, you decided on a content management system, got a license for it or adapted open source software for your client's needs. Then the question arises: where's the content? Not there yet? That's not so bad, there's dummy copy to the rescue. But worse, what if the fish doesn't fit in the can, the foot's to big for the boot? Or to small? To short sentences, to many headings, images too large for the proposed design, or too small, or they fit in but it looks iffy for reasons the folks in the meeting can't quite tell right now, but they're unhappy, somehow. A client that's unhappy for a reason is a problem, a client that's unhappy though he or her can't quite put a finger on it is worse.\",\r\n  \"But. A big but: Lorem Ipsum is not t the root of the problem, it just shows what's going wrong. Chances are there wasn't collaboration, communication, and checkpoints, there wasn't a process agreed upon or specified with the granularity required. It's content strategy gone awry right from the start. Forswearing the use of Lorem Ipsum wouldn't have helped, won't help now. It's like saying you're a bad designer, use less bold text, don't use italics in every other paragraph. True enough, but that's not all that it takes to get things back on track.\",\r\n  \"If that's what you think how bout the other way around? How can you evaluate content without design? No typography, no colors, no layout, no styles, all those things that convey the important signals that go beyond the mere textual, hierarchies of information, weight, emphasis, oblique stresses, priorities, all those subtle cues that also have visual and emotional appeal to the reader. Rigid proponents of content strategy may shun the use of dummy copy but then designers might want to ask them to provide style sheets with the copy decks they supply that are in tune with the design direction they require.\",\r\n  \"Websites in professional use templating systems. Commercial publishing platforms and content management systems ensure that you can show different text, different data using the same template. When it's about controlling hundreds of articles, product pages for web shops, or user profiles in social networks, all of them potentially with different sizes, formats, rules for differing elements things can break, designs agreed upon can have unintended consequences and look much different than expected.\",\r\n];\r\n\r\nexport default paraData;\r\n","import React, { useState } from \"react\";\r\nimport paraData from \"./paraData\";\r\n\r\nconst Paragraph = () => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [para, setPara] = useState([]);\r\n\r\n  const handleChange = (e) => {\r\n    const inputValue = parseInt(e.target.value);\r\n    if (inputValue < 0) {\r\n      setValue(0);\r\n    } else {\r\n      setValue(inputValue);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let newArray = paraData.slice(0, value);\r\n    if (value === \"\") {\r\n      newArray = paraData;\r\n    }\r\n    if (value === 0) {\r\n      newArray = [];\r\n    }\r\n    setPara(newArray);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container text-center mt-5\">\r\n        <h1 className=\"display-4\">Dummy Paragraph Generator</h1>\r\n        <div className=\"row mt-5 px-5\">\r\n          <form action=\"\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group d-flex\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                id=\"para\"\r\n                aria-describedby=\"helpId\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                placeholder=\"Number of Paragraph\"\r\n              />\r\n              <button type=\"submit\" className=\"btn btn-outline-primary\">\r\n                {\" \"}\r\n                Generate{\" \"}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"row mt-5 px-5\">\r\n          {para.map((data, index) => {\r\n            return (\r\n              <div key={index} className=\"col-12 px-md-5 mt-4\">\r\n                <p> {data}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <p>\r\n          {value > paraData.length ? (\r\n            <div className=\"alert alert-danger my-5\" role=\"alert\">\r\n              <strong>You Have Reached the Limit of Highest ParaGraph</strong>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Paragraph;\r\n","import \"./App.css\";\nimport Paragraph from \"./components/Paragraph\";\n\nfunction App() {\n  return (\n    <>\n      <Paragraph />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}